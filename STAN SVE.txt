public class StanTest {

	public Stan S;
	
	@Rule
	public final TestRule timeout = Timeout.seconds(5);
	
	@BeforeClass
	public static void tProveriOperativniSistem() {
		Assume.assumeTrue(System.getProperty("os.name").contains("Windows"));
	}
	
	@Rule
	public final ErrorCollector ec = new ErrorCollector();
	
	@Before
	public void init() {
		S = new Stan("Nemanjina",150,100);
	}
	
	@Rule
	public final TestName name = new TestName();
	
	@Rule
	public ExpectedException exception = ExpectedException.none();

	

	
//GETTER TESTOVI
	@Test
	public void getKvadraturaTest() {
		try {
			assertEquals("getKvadraturaTest", name.getMethodName());
		}catch(Throwable t) {
			ec.addError(t);
		}
		
		int kvadratura = 150;
		
		try {
			
			assertEquals(kvadratura, S.getKvdratura());
		}catch(Throwable t) {
			ec.addError(t);
		}
	}
	
	@Test
	public void getCenaPoKvadratuTest() {
		try {
			assertEquals("getCenaPoKvadratuTest", name.getMethodName());
		}catch(Throwable t) {
			ec.addError(t);
		}
		
		int cenaPoKvadratu = 100;
		
		try {
			assertEquals(cenaPoKvadratu, S.getCenaPoKvadratu());
		}catch(Throwable t) {
			ec.addError(t);
		}
	}
	
	@Test
	public void getAdresaTest() {
		try {
			assertEquals("getAdresaTest", name.getMethodName());
		}catch(Throwable t) {
			ec.addError(t);
		}
		
		String adresa = "Nemanjina";
		
		try {
			assertEquals(adresa, S.getAdresa());
		}catch(Throwable t) {
			ec.addError(t);
		}
	}



//SETTER TESTOVI
	@Test(expected = RuntimeException.class)
	public void setKvadraturaTest1() {
		int kvadratura = 150;
		assertEquals(kvadratura, S.getKvdratura());
		S.setKvadratura(-1);
	}
	
	@Test
	public void setKvadraturaTest2() {
		int kvadratura = 150;
		assertEquals(kvadratura, S.getKvdratura());
		
		S.setKvadratura(100);
		int ocekivanaKvadratura = 100;
		assertEquals(ocekivanaKvadratura, S.getKvdratura());
	}
	
	@Test(expected = RuntimeException.class)
	public void setCenaPoKvadratuTest1() {
		int cenaPoKvad = 100;
		assertEquals(cenaPoKvad, S.getCenaPoKvadratu());
		S.setCenaPoKvadratu(-1);
	}
	
	@Test
	public void setCenaPoKvadratuTest2() {
		int cenaPoKvad = 100;
		assertEquals(cenaPoKvad, S.getCenaPoKvadratu());
		
		S.setCenaPoKvadratu(150);
		int novaCenaPoKvadratu = 150;
		
		assertEquals(novaCenaPoKvadratu, S.getCenaPoKvadratu());
	}

	@Test(expected = RuntimeException.class)
	public void setAdresaTest1() {
		String adresa = "Nemanjina";
		assertEquals(adresa, S.getAdresa());
		S.setAdresa(null);
	}
	
	@Test
	public void setAdresaTest2() {
		String adresa = "Nemanjina";
		assertEquals(adresa, S.getAdresa());
		
		String novaAdresa = "Vojvode stepe";
		S.setAdresa(novaAdresa);
		
		assertEquals(novaAdresa, S.getAdresa());
	}


public void toStringTest() {
try {
assertEquals("toStringTest",name.getMethodName());
} catch (Throwable t) {
ec.addError(t);
}
String ocekivaniRezultat = "Stan [adresa=Nemanjina, kvadratura=150, cena po kvadratu=100]";
try {
String stvarniRezultat = S.toString();
assertEquals(ocekivaniRezultat,stvarniRezultat);
}catch (Throwable t) {
ec.addError(t);
}
} 




METODE TESTOVI//////////////////



@Test
public void povoljanStanTest2() {
try {
assertEquals("povoljanStanTest2",name.getMethodName());
} catch (Throwable t) {
ec.addError(t);
}
boolean ocekivaniRezultat = false;
S.setCenaPoKvadratu(4000);
S.setKvadratura(100000);
try {
boolean stvarniRezultat = S.povoljanStan();
assertEquals(ocekivaniRezultat,stvarniRezultat);
}catch (Throwable t) {
ec.addError(t);
}
}


TEST RUNNER//////////
class TestRunner {
public static void main(String[] args) {
Result result = JUnitCore.runClasses(StanTests.class, APSParametrizedTests.class);
Logger l = Logger.getLogger(TestRunner.class.toString());
for(Failure f: result.getFailures()) {
l.info(f.toString());
}
l.info("Vreme"+result.getRunTime());
l.info("Ukupno Testova"+result.getRunCount());
l.info("Ukuono Proslih"+(result.getRunCount()-result.getFailureCount()-result.getIgnoreCount()-result.getAssumptionFailureCount()));
l.info("Ukupno palih"+result.getFailureCount());
l.info("Ukupno odbijenih"+result.getIgnoreCount());
l.info("Ukupno dinamicki odbijenih"+result.getAssumptionFailureCount());
if(result.wasSuccessful())
l.info("Svi testovi su prosli");
else
l.warning("Postoji test koji je pao");
}
}




	